import os
import re
import email
import openai
import tldextract
from email import policy
from email.parser import BytesParser
from dotenv import load_dotenv

# Load API key securely
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

def extract_urls(text):
    url_regex = r"(https?://[^\s]+)"
    return re.findall(url_regex, text)

def is_url_suspicious(url):
    ext = tldextract.extract(url)
    domain = f"{ext.domain}.{ext.suffix}"
    subdomain = ext.subdomain
    if "paypal" in subdomain and "paypal" not in domain:
        return True
    return False

def parse_headers(msg):
    spoof_flags = []
    return_path = msg.get("Return-Path", "")
    from_hdr = msg.get("From", "")
    spf_result = msg.get("Authentication-Results", "")

    if return_path and from_hdr and return_path not in from_hdr:
        spoof_flags.append("Return-Path mismatch")
    if "spf=fail" in spf_result.lower():
        spoof_flags.append("SPF failed")
    if "dkim=fail" in spf_result.lower():
        spoof_flags.append("DKIM failed")
    return spoof_flags

def score_text_with_gpt(text):
    prompt = f"""
You are an email security analyst. Read the message below and assign a phishing risk score from 0 to 10. Justify with keywords and reasoning.

Message:
{text}

Respond with:
Score: X/10
Reasoning: ...
"""
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0
    )
    return response.choices[0].message["content"]

def analyse_email_file(filepath):
    with open(filepath, "rb") as f:
        msg = BytesParser(policy=policy.default).parse(f)

    subject = msg["Subject"]
    body = msg.get_body(preferencelist=('plain', 'html'))
    content = body.get_content() if body else ""

    print(f"\nüìß Analyzing: {os.path.basename(filepath)}")
    print(f"Subject: {subject}\n")

    urls = extract_urls(content)
    suspicious_urls = [url for url in urls if is_url_suspicious(url)]

    spoof_flags = parse_headers(msg)
    gpt_score = score_text_with_gpt(content)

    print("üîó URLs Found:")
    for url in urls:
        status = "‚ö†Ô∏è Suspicious" if url in suspicious_urls else "‚úîÔ∏è Clean"
        print(f" - {url} {status}")

    print("\nüì¨ Header Analysis:")
    for flag in spoof_flags:
        print(f" - {flag}")

    print("\nüß† GPT Language Score:")
    print(gpt_score)

emails_dir = "./emails"
for fname in os.listdir(emails_dir):
    if fname.endswith(".eml"):
        analyse_email_file(os.path.join(emails_dir, fname))
